@using MockServer.Web.Controllers
@model MockServer.Web.Models.Database.SaveDatabaseViewModel
<div>
    <div class="mb-2">
        <a class="text-decoration-none text-secondary fw-normal fs-6"
            href="@Url.Action(nameof(DatabasesController.Index))"><span class="me-1"><i
                    class="bi bi-arrow-left"></i></span><span>Back</span></a>
    </div>
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button"
                role="tab" aria-controls="home" aria-selected="true">Settings</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button"
                role="tab" aria-controls="profile" aria-selected="false">Data</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="messages-tab" data-bs-toggle="tab" data-bs-target="#messages" type="button"
                role="tab" aria-controls="messages" aria-selected="false">Applications</button>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div class="tab-pane active" id="home" role="tabpanel" aria-labelledby="home-tab">
            <section>
                <div class="border rounded mt-2 p-2">
                    <div class="mb-3">
                        <label asp-for="Name" class="form-label">Name</label>
                        <input type="text" class="form-control" asp-for="Name">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" asp-for="Description" rows="3"></textarea>
                    </div>
                    <div>
                        <button class="btn btn-primary" style="width: 80px;">Save</button>
                    </div>
                </div>
            </section>
            <section class="mt-3">
                <h4 class="fs-6">Danger Zone</h4>
                <ul class="list-group">
                    <li class="">
                        <div class="d-flex tw-bg-red-100 me-auto rounded p-2">
                            <div class="flex-grow-1">
                                <h6>Delete this database</h6>
                                <p>Warning! Once confirmed, this operation can't be undone!</p>
                            </div>
                            <div class="my-auto me-3">
                                <button class="btn btn-danger" style="width: 80px;" type="button" data-bs-toggle="modal"
                                    data-bs-target="#delete-modal">Delete</button>
                                <div id="delete-modal" class="modal fade" tabindex="-1">
                                    <form method="post"
                                        action="@Url.Action(nameof(DatabasesController.Delete), new { DatabaseName = Model.Name })">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Are you absolutely sure?</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                        aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="alert">
                                                        This action cannot be undone! Deleting this database may affect
                                                        applications that rely on it.
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary"
                                                        data-bs-dismiss="modal">Cancel</button>
                                                    <button id="delete-button" type="submit"
                                                        class="btn btn-danger">Delete</button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>
            </section>
        </div>
        <div class="tab-pane" id="profile" role="tabpanel" aria-labelledby="profile-tab">
            <div class="mt-2 border rounded p-2">
                <div class="d-flex">
                    <button id="load_json_btn" class="btn btn-primary me-2" type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                        <span class="me-2"><i class="bi bi-arrow-clockwise"></i></span>
                        <span id="load_json_btn-text">Read</span>
                    </button>
                    <a class="btn btn-secondary"
                        href="@Url.Action(nameof(DatabasesController.Download), new { DatabaseName = Model.Name})">
                        <span class="me-2"><i class="bi bi-cloud-arrow-down"></i></span><span>Download</span>
                    </a>
                    <div class="vr mx-2"></div>
                    <button id="edit-data-button" class="btn btn-primary me-2" type="button">
                        <span id="edit-data-button-icon" class="me-2"><i class="bi bi-pencil-square"></i></span>
                        <span id="edit-data-button-text">Edit</span>
                    </button>
                    <button id="cancel-edit-button" class="btn btn-primary me-2" type="button" disabled>
                        <span class="me-2"><i class="bi bi-x"></i></span>
                        <span>Cancel</span>
                    </button>
                    <button id="upload_json_btn" class="btn btn-primary me-2" type="button" disabled>
                        <span class="me-2"><i class="bi bi-cloud-arrow-up"></i></span>
                        <span>Upload</span>
                    </button>
                    <input type="file" id="file-input" style="display:none;">
                    <div class="vr mx-2"></div>
                    <button id="render-table-button" class="btn btn-primary me-2" type="button">
                        <span class="me-2"><i class="bi bi-arrow-clockwise"></i></span>
                        <span>Render Table</span>
                    </button>
                </div>
                <div>
                    <div class="row">
                        <div class="col">
                            <div class="py-2 text-center">Raw JSON
                                <span id="datasource"></span>
                            </div>
                            <div id="editor" style="height: 400px;"></div>
                        </div>
                        <div class="col">
                            <div class="py-2 text-center">Table</div>
                            <div id="data_table">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <script src="https://unpkg.com/monaco-editor@latest/min/vs/loader.js"></script>
            <script>
                let data, editor, editing = false, editorChanged = false;
                require.config({paths: {'vs': 'https://unpkg.com/monaco-editor@latest/min/vs'}});
                require(['vs/editor/editor.main'], function () {
                    editor = monaco.editor.create(document.getElementById('editor'), {
                        language: 'json',
                        readOnly: true,
                        automaticLayout: true
                    });
                    $.get('@Url.Action(nameof(DatabasesController.Data), new { DatabaseName = Model.Name})', function (data) {
                        data = data;
                        setEditorValue(data);
                        $('#datasource').text('(read from database)');
                        editor.onDidChangeModelContent(function (event) {
                            if (editorChanged === false) {
                                editorChanged = true;
                            }
                        });
                    });
                });

                function setEditorValue(value) {
                    if (value !== undefined) {
                        editor.setValue(value);
                    }
                }

                function fetchData() {
                    $.get('@Url.Action(nameof(DatabasesController.Data), new { DatabaseName = Model.Name})', function (data) {
                        data = data;
                        $('#datasource').text('(read from database)');
                        setEditorValue(data);
                    });
                }
            </script>
            <script>
                $('#load_json_btn').click(function () {
                    fetchData();
                });

                $('#edit-data-button').click(function () {
                    if (!editing) {
                        editor.updateOptions({readOnly: false});
                        $('#edit-data-button-text').html('Save');
                        $('#edit-data-button-icon').html('<i class="bi bi-hdd"></i>');
                        $('#cancel-edit-button').prop("disabled", false);
                        $('#upload_json_btn').prop("disabled", false);
                        editing = true;
                    }
                    else {
                        try {
                            //check format
                            const json = editor.getValue();
                            log(json);
                            $.parseJSON(json);
                            $.post('@Url.Action(nameof(DatabasesController.Data), new { DatabaseName = Model.Name})', {Data: json}, function () {
                                editor.updateOptions({readOnly: true});
                                $('#edit-data-button-text').html('Edit');
                                $('#edit-data-button-icon').html('<i class="bi bi-pencil-square"></i>');
                                $('#cancel-edit-button').prop("disabled", true);
                                $('#upload_json_btn').prop("disabled", true);
                                editing = false;
                            });
                        } catch (e) {
                            alert('error');
                        }
                    }
                });

                $('#cancel-edit-button').click(function () {
                    if (editorChanged) {
                        const confirmationMessage = 'Are you sure you want to leave without saving your changes?';
                        if (confirm(confirmationMessage)) {
                            cancel();
                            fetchData();
                        }
                    }
                    else {
                        cancel();
                    }
                    function cancel() {
                        editor.updateOptions({readOnly: true});
                        $('#edit-data-button-text').html('Edit');
                        $('#edit-data-button-icon').html('<i class="bi bi-pencil-square"></i>');
                        $('#cancel-edit-button').prop("disabled", true);
                        $('#upload_json_btn').prop("disabled", true);
                        editing = false;
                    }
                });

                $('#upload_json_btn').on('click', function () {
                    $('#file-input').trigger('click');
                });

                $('#file-input').on('change', function (e) {
                    var file = e.target.files[0];
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var data = e.target.result;
                        setEditorValue(data);
                    };
                    reader.readAsText(file);
                    $('#datasource').text(`(read from file: ${file.name})`);
                });

                $('#render-table-button').click(function () {
                    processJson();
                });

                function call(a) {
                    processJson();
                }
                function processJson() {
                    let obj = getJsonVar();
                    let table = buildTable(obj);
                    $("#data_table").html(table);
                }
                function getJsonVar() {
                    try {
                        const json = editor.getValue();
                        var a = $.parseJSON(json);
                        return a;
                    } catch (e) {
                    }
                }
                function buildTable(a) {
                    var e = document.createElement("table"), d, b;
                    if ("[object Array]" === Object.prototype.toString.call(a)) return buildArray(a);
                    for (var c in a) "object" != typeof a[c] || "[object Array]" === Object.prototype.toString.call(a[c]) ? "object" == typeof a[c] && "[object Array]" === Object.prototype.toString.call(a[c]) ? (d = e.insertRow(-1), b = d.insertCell(-1), b.colSpan = 2, b.innerHTML = '<div class="td_head">' + $("<div />").text(c).html() + '</div><table class="table">' + $(buildArray(a[c]), false).html() + "</table>") : (d = e.insertRow(-1), b = d.insertCell(-1), b.innerHTML = "<div class='td_head'>" + $("<div />").text(c).html() + "</div>", d = d.insertCell(-1), d.innerHTML = "<div class='td_row_even'>" + $("<div />").text(a[c]).html() + "</div>") : (d = e.insertRow(-1), b = d.insertCell(-1), b.colSpan = 2, b.innerHTML = '<div class="td_head">' + $("<div />").text(c).html() + '</div><table style="width:100%">' + $(buildTable(a[c]), false).html() + "</table>");
                    return e;
                }
                function buildArray(a) {
                    var e = document.createElement("table"), d, b, c = false, p = false, m = {}, h = -1, n = 0, l;
                    l = "";
                    if (0 == a.length) return "<div></div>";
                    d = e.insertRow(-1);
                    for (var f = 0; f < a.length; f++) if ("object" != typeof a[f] || "[object Array]" === Object.prototype.toString.call(a[f])) "object" == typeof a[f] && "[object Array]" === Object.prototype.toString.call(a[f]) ? (b = d.insertCell(h), b.colSpan = 2, b.innerHTML = '<div class="td_head"></div><table class="table">' + $(buildArray(a[f]), false).html() + "</table>", c = true) : p || (h += 1, p = true, b = d.insertCell(h), m.empty = h, b.innerHTML = "<div class='td_head'>&nbsp;</div>"); else for (var k in a[f]) l = "-" + k, l in m || (c = true, h += 1, b = d.insertCell(h), m[l] = h, b.innerHTML = "<div class='td_head'>" + $("<div />").text(k).html() + "</div>");
                    c || e.deleteRow(0);
                    n = h + 1;
                    for (f = 0; f < a.length; f++) if (d = e.insertRow(-1), td_class = 0 == f % 2 ? "td_row_even" : "td_row_odd", "object" != typeof a[f] || "[object Array]" === Object.prototype.toString.call(a[f])) if ("object" == typeof a[f] && "[object Array]" === Object.prototype.toString.call(a[f])) for (h = m.empty, c = 0; c < n; c++) b = d.insertCell(c), b.className = td_class, l = c == h ? '<table class="table">' + $(buildArray(a[f]), false).html() + "</table>" : " ", b.innerHTML = "<div class='" + td_class + "'>" + $("<div />").text(l).html() + "</div>"; else for (h = m.empty, c = 0; c < n; c++) b = d.insertCell(c), l = c == h ? a[f] : " ", b.className = td_class, b.innerHTML = "<div class='" + td_class + "'>" + $("<div />").text(l).html() + "</div>"; else {
                        for (c = 0; c < n; c++) b = d.insertCell(c), b.className = td_class, b.innerHTML = "<div class='" + td_class + "'>&nbsp;</div>";
                        for (k in a[f]) c = a[f], l = "-" + k, h = m[l], b = d.cells[h], b.className = td_class, "object" != typeof c[k] || "[object Array]" === Object.prototype.toString.call(c[k]) ? "object" == typeof c[k] && "[object Array]" === Object.prototype.toString.call(c[k]) ? b.innerHTML = '<table class="table">' + $(buildArray(c[k]), false).html() + "</table>" : b.innerHTML = "<div class='" + td_class + "'>" + $("<div />").text(c[k]).html() + "</div>" : b.innerHTML = '<table class="table">' + $(buildTable(c[k]), false).html() + "</table>";
                    }
                    return e;
                }
            </script>
        </div>
        <div class="tab-pane" id="messages" role="tabpanel" aria-labelledby="messages-tab">
            <div class="p-2 form-text">Applications using this database.</div>
            @if (Model.AllServices?.Count() > 0)
            {
                <ul class="list-group list-group-flush">
                    @foreach (var app in Model.AllServices)
                    {
                        <li class="list-group-item">
                            <div class="d-flex">
                                <div class="flex-grow-1">
                                    <p class="m-1 tw-font-medium">@app.Name</p>
                                    <p class="m-1 tw-text-gray-500">@app.Type</p>
                                </div>
                                <div class="form-check form-switch my-auto">
                                    <input class="form-check-input js-application-check" type="checkbox" role="switch"
                                value="@string.Format("{0}, {1}", app.Id, app.Type)"
                                checked=@(Model.AllowedService?.Any(a => a.Id == app.Id && a.Type == app.Type) ??
                                false)>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No Applications</p>
            }
            <script>
                $('.js-application-check').change(function () {
                    const allowed = $(this).prop('checked');
                    const value = $(this).val();
                    const id = value.split(',')[0];
                    const type = value.split(',')[1];
                    const data = {
                        Service: {
                            Id: id,
                            Type: type
                        },
                        Allowed: allowed
                    };
                    $.post({
                        url: '@Url.Action(nameof(DatabasesController.ConfigureApplication), new { DatabaseName = Model.Name})',
                        data: data,
                        success: function (data) {
                        }
                    });
                })
            </script>
        </div>
    </div>
</div>