@using MockServer.Web.Controllers
<script>
    $(function () {
        setUpRequestBodyEditor();
        setUpResponseBodyEditor();
        setUpResponseBodyScriptEditor();
    });
    function setUpRequestBodyEditor() {
        var editor = ace.edit("request-body-editor");
        editor.setShowPrintMargin("false");
        var textarea = $('textarea[name="RequestBody.Text"]').hide();
        editor.getSession().setValue(textarea.val());
        editor.getSession().on('change', function () {
            textarea.val(editor.getSession().getValue());
        });
        $('#request-body-type').change(function (e) {
            var mode = $('option:selected', $(this)).val();
            setEditorMode(editor, mode);
        }).change();
    }
    function setUpResponseBodyEditor() {
        var editor = ace.edit("response-body-editor");
        editor.setShowPrintMargin("false");
        var textarea = $('textarea[name="Response.BodyText"]').hide();
        editor.getSession().setValue(textarea.val());
        editor.getSession().on('change', function () {
            textarea.val(editor.getSession().getValue());
        });
        $('#response-body-type').change(function (e) {
            var mode = $('option:selected', $(this)).val();
            setEditorMode(editor, mode);
        }).change();
    }
    function setUpResponseBodyScriptEditor() {
        var editor = ace.edit("response-body-render-script");
        editor.setShowPrintMargin('false');
        var textarea = $('textarea[name="Response.BodyRenderScript"]').hide();
        editor.getSession().setValue(textarea.val());
        editor.getSession().on('change', function () {
            textarea.val(editor.getSession().getValue());
        });
        editor.session.setMode("ace/mode/javascript");
    }
    function setEditorMode(editor, mode) {
        if (mode === 'json') {
            editor.session.setMode("ace/mode/json");
        } else if (mode === 'xml') {
            editor.session.setMode("ace/mode/xml");
        } else if (mode === 'text') {
            editor.session.setMode("ace/mode/text");
        }
    }
</script>
<script>
    $(function () {
        addTableEventListener();
    });

    function addTableEventListener() {
        $('#request-params input[type=text]').off('keyup');
        $('#request-params .param-delete').off('click');

        $('#request-params input[type=text]').keyup(function () {
            const rowIndex = $('#request-params tbody tr').index($(this).closest('tr'));
            if (rowIndex === $('#request-params tbody tr').length - 1) {
                appendRequestParamRow();
                addTableEventListener();
            }
        });
        $('#request-params .param-delete').click(function () {
            $(this).off('click');
            $(this).closest("tr").remove();
            indexRow();
        });
    }
    function indexRow() {
        $('#request-params tbody tr').each(function (rowIndex) {
            $("input.param-key", this).attr('name', 'RequestParams[' + rowIndex + '].Key');
            $("input.param-value", this).attr('name', 'RequestParams[' + rowIndex + '].Value');
            $("input.param-required", this).attr('name', 'RequestParams[' + rowIndex + '].Required');
            $("input.param-match-exactly", this).attr('name', 'RequestParams[' + rowIndex + '].MatchExactly');
        });
    }
    function appendRequestParamRow() {
        if ('content' in document.createElement('template')) {
            const template = document.querySelector('#requestParamRow');
            let templateContent = template.content.cloneNode(true);
            let tr = $(templateContent.querySelector('tr'));
            const rowIndex = $('#request-params tbody tr').length;
            $("input.param-key", tr).attr('name', 'RequestParams[' + rowIndex + '].Key');
            $("input.param-value", tr).attr('name', 'RequestParams[' + rowIndex + '].Value');
            $("input.param-required", tr).attr('name', 'RequestParams[' + rowIndex + '].Required');
            $("input.param-match-exactly", tr).attr('name', 'RequestParams[' + rowIndex + '].MatchExactly');
            $('#request-params tbody').append(tr);
        } else {
            alert('HTML template element is not supported');
        }
    }
</script>
<script>
    $(function () {
        addRequestHeaderTableEventListener();
    });
    function addRequestHeaderTableEventListener() {
        $('#request-header-table input[type=text]').off('keyup');
        $('#request-header-table .header-delete').off('click');

        $('#request-header-table input[type=text]').keyup(function () {
            const rowIndex = $('#request-header-table tbody tr').index($(this).closest('tr'));
            if (rowIndex === $('#request-header-table tbody tr').length - 1) {
                appendRequestHeaderRow();
                addRequestHeaderTableEventListener();
            }
        });
        $('#request-header-table .header-delete').click(function () {
            $(this).off('click');
            $(this).closest("tr").remove();
            $('#request-header-table tbody tr').each(function (rowIndex) {
                $("input.header-key", this).attr('name', 'RequestHeaders[' + rowIndex + '].Name');
                $("input.header-value", this).attr('name', 'RequestHeaders[' + rowIndex + '].Value');
                $("input.header-required", this).attr('name', 'RequestHeaders[' + rowIndex + '].Required');
                $("input.header-match-exactly", this).attr('name', 'RequestHeaders[' + rowIndex + '].MatchExactly');
            });
        });
    }
    function appendRequestHeaderRow() {
        if ('content' in document.createElement('template')) {
            const template = document.querySelector('#requestHeaderRow');
            let templateContent = template.content.cloneNode(true);
            let tr = $(templateContent.querySelector('tr'));
            const rowIndex = $('#request-header-table tbody tr').length;
            $("input.header-key", tr).attr('name', 'RequestHeaders[' + rowIndex + '].Name');
            $("input.header-value", tr).attr('name', 'RequestHeaders[' + rowIndex + '].Value');
            $("input.header-required", tr).attr('name', 'RequestHeaders[' + rowIndex + '].Required');
            $("input.header-match-exactly", tr).attr('name', 'RequestHeaders[' + rowIndex + '].MatchExactly');
            $('#request-header-table tbody').append(tr);
        } else {
            alert('HTML template element is not supported');
        }
    }
</script>
<script>
    $(function () {
        addResponseHeaderTableEventListener();
    });
    function addResponseHeaderTableEventListener() {
        $('#response-header-table input[type=text]').off('keyup');
        $('#response-header-table .header-delete').off('click');

        $('#response-header-table input[type=text]').keyup(function () {
            const rowIndex = $('#response-header-table tbody tr').index($(this).closest('tr'));
            if (rowIndex === $('#response-header-table tbody tr').length - 1) {
                appendResponseHeaderRow();
                addResponseHeaderTableEventListener();
            }
        });
        $('#response-header-table .header-delete').click(function () {
            $(this).off('click');
            $(this).closest("tr").remove();
            $('#response-header-table tbody tr').each(function (rowIndex) {
                $("input.header-key", this).attr('name', 'ResponseHeaders[' + rowIndex + '].Name');
                $("input.header-value", this).attr('name', 'ResponseHeaders[' + rowIndex + '].Value');
            });
        });
    }
    function appendResponseHeaderRow() {
        if ('content' in document.createElement('template')) {
            const template = document.querySelector('#responseHeaderRow');
            let templateContent = template.content.cloneNode(true);
            let tr = $(templateContent.querySelector('tr'));
            const rowIndex = $('#response-header-table tbody tr').length;
            $("input.header-name", tr).attr('name', 'ResponseHeaders[' + rowIndex + '].Name');
            $("input.header-value", tr).attr('name', 'ResponseHeaders[' + rowIndex + '].Value');
            $('#response-header-table tbody').append(tr);
        } else {
            alert('HTML template element is not supported');
        }
    }
</script>
<script>
    $(function () {
        $('#btnSave').click(function () {
            let params = [];
            let headers = [];

            let body = {
                required: $("#request-body-tab input[name$='Required']").prop('checked'),
                matchExactly: $("#request-body-tab input[name$='MatchExactly']").prop('checked'),
                format: 'json',
                text: $('textarea[name="RequestBody.Text"]').val()
            };
            $('#request-params tbody tr').each(function () {
                const key = $("input[name$='Key']", this).val();
                const value = $("input[name$='Value']", this).val();
                const required = $("input[name$='Required']", this).prop('checked');
                const matchExactly = $("input[name$='MatchExactly']", this).prop('checked');
                const constraints = $("input[name$='Constraints']", this).val();
                if (key !== '' && value !== '') {
                    params.push({
                        key: key,
                        value: value,
                        required: required,
                        matchExactly: matchExactly,
                        constraints: constraints
                    });
                }
            });
            $('#request-header-table tbody tr').each(function () {
                const name = $("input[name$='Name']", this).val();
                const value = $("input[name$='Value']", this).val();
                const required = $("input[name$='Required']", this).prop('checked');
                const matchExactly = $("input[name$='MatchExactly']", this).prop('checked');
                if (name !== '' && value !== '') {
                    headers.push({
                        name: name,
                        value: value,
                        required: required,
                        matchExactly: matchExactly
                    });
                }
            });
            let responseHeaders = [];
            $('#response-header-table tbody tr').each(function () {
                const name = $("input[name$='Name']", this).val();
                const value = $("input[name$='Value']", this).val();
                if (name !== '' && value !== '') {
                    responseHeaders.push({
                        name: name,
                        value: value
                    });
                }
            });

            let response = {
                statusCode: $('input[name="Response.StatusCode"]').val(),
                bodyText: $('textarea[name="Response.BodyText"]').val(),
                bodyTextRenderEngine: $('select[name="Response.BodyTextRenderEngine"] option:selected').val(),
                bodyRenderScript: $('textarea[name="Response.BodyRenderScript"]').val(),
                delay: $('input[name="Response.Delay"]').prop('checked'),
                delayTime: $('input[name="Response.DelayTime"]').val()
            };

            let fields = [];
            fields[0] = '@nameof(Model.RequestParams)';
            fields[1] = '@nameof(Model.RequestHeaders)';
            fields[2] = '@nameof(Model.RequestBody)';
            fields[3] = '@nameof(Model.ResponseHeaders)';
            fields[4] = '@nameof(Model.Response)';
            const projectName = '@ViewData["ProjectName"]';
            const requestId = @ViewData["RequestId"];
            $.post({
                url: '@Url.Action(nameof(RequestsController.ConfigFixedRequest), "Requests", new { ProjectName = ViewData["ProjectName"], RequestId = ViewData["RequestId"]})',
                data: {
                    fields: fields,
                    RequestParams: params,
                    RequestHeaders: headers,
                    RequestBody: body,
                    ResponseHeaders: responseHeaders,
                    response: response
                },
                success: function (data) {
                },
                error: function (xhr, status, error) {
                    alert('Error:' + error);
                }
            });
        });
    });
</script>
<script>
    $(function () {
        $('#btnEdit').click(function () {
            openEditor();
        });
    });
    function openEditor() {
        $.get({
            url: '@Url.Action(nameof(RequestsController.GetEditPartial), "Requests", new {projectName = ViewData["ProjectName"], id = ViewData["RequestId"]})',
            success: function (data) {
                const html = data;
                const modal = $(html);
                modal.on('shown.bs.modal', function () {
                    $('#btnSave', modal).click(function () {
                        const formMode = $('input[name=formMode]').val();
                        let request = {
                            Type: $('input[name=Type]:checked', modal).val(),
                            Name: $('input[name=Name]', modal).val(),
                            Description: $('input[name=Description]', modal).val(),
                            Method: $('select[name=Method] option:selected', modal).val(),
                            Path: $('input[name=Path]', modal).val()
                        };
                        $.post({
                            url: '@Url.Action(nameof(RequestsController.Edit), "Requests", new {ProjectName = ViewData["ProjectName"], RequestId = ViewData["RequestId"]})',
                            data: request,
                            success: function (data) {
                                $('#btnSave', modal).off('click');
                                const id = data;
                                modal.data('id', id);
                                modal.modal('hide');
                            },
                            error: function () {
                                alert('something went wrong');
                            }
                        });
                    });
                    $('.js-select-authorization', modal).click(function () {
                        console.log('authorization');
                        $('#Authorization_DisplayName').val($(this).data('authorization'));
                        $('#selectedAuthorization').html($(this).data('authorization'));
                    });
                    $('select[name=Method]').on('change', function () {
                        generatePreviewUrl(modal);
                    });
                    $('input[name=Path]').on('keyup', function () {
                        generatePreviewUrl(modal);
                    });
                });
                modal.on('hidden.bs.modal', function (e) {
                    if (modal.data('id') !== undefined) {
                        console.log('TODO: open request id ' + modal.data('id'));
                        location.reload();
                    }
                    modal.remove();
                });
                generatePreviewUrl(modal);
                modal.modal('show');
            }
        });
    }
</script>
<script>
    $(function () {
        $('.js-config-param-constraints').click(function () {
            const constraintsInput = $(this).siblings('input[name*=Constraints]');
            const constraintsCountLabel = $(this).siblings('span[name=ConstraintsCount]');
            const modal = $($('#requestParamConstraintsConfig').html());
            split(constraintsInput.val());
            $('body').append(modal);
            $('.js-save', modal).click(function () {
                var constraints = buildConstraintsToString();
                constraintsInput.val(constraints);
                constraintsCountLabel.text(constraints.split(':').length);
                modal.modal('hide');
            });
            modal.modal('show');
            function split(value) {
                const constraints = value.split(':');
                value = 'required:bool:minlength(5):maxlength(10):legth(10):min(1):max(10):range(1,10):alpha:regex(abc)';
                let regex;
                regex = new RegExp('required');
                if (value.match(regex) !== null) {
                    $('input[name=required]', modal).prop('checked', true);
                }
                const types = ['int', 'bool', 'datetime', 'decimal', 'double', 'float', 'guid', 'long'];
                regex = new RegExp(types.join('|'));
                if (value.match(regex) !== null) {
                    $('input[name=type]', modal).prop('checked', true);
                    $('select[name=type]', modal).val(value.match(regex));
                }

                regex = new RegExp('minlength\(\d*\)');
                if (value.match(regex) !== null) {
                    console.log(value.match(regex));
                    $('input[name=minlength]', modal).prop('checked', true);
                }

                regex = new RegExp('maxlength\(\d*\)');
                if (regex.test(value)) {
                    $('input[name=maxlength]', modal).prop('checked', true);
                }
                regex = new RegExp('length\(\d*\)');
                if (regex.test(value)) {
                    $('input[name=length]', modal).prop('checked', true);
                }
                regex = new RegExp('min\(\d*\)');
                if (regex.test(value)) {
                    $('input[name=min]', modal).prop('checked', true);
                }
                regex = new RegExp('max\(\d*\)');
                if (regex.test(value)) {
                    $('input[name=max]', modal).prop('checked', true);
                }
                regex = new RegExp('range\(\d*\,\d*\)');
                if (regex.test(value)) {
                    alert('range');
                    $('input[name=range]', modal).prop('checked', true);
                }
                regex = new RegExp('alpha');
                if (regex.test(value)) {
                    $('input[name=alpha]', modal).prop('checked', true);
                }
                regex = new RegExp('regex\(...\)');
                if (regex.test(value)) {
                    $('input[name=regex]', modal).prop('checked', true);
                }
            }
            function buildConstraintsToString() {
                let constraints = [];
                if ($('input[name=required]', modal).prop('checked')) {
                    constraints.push('required');
                }
                if ($('input[name=type]', modal).prop('checked')) {
                    const type = $('select[name=type] option:selected', modal).val();
                    constraints.push(type);
                }
                if ($('input[name=minlength][type=checkbox]', modal).prop('checked')) {
                    const minlength = $('input[name=minlength][type=number]', modal).val();
                    constraints.push(`minlength(${minlength})`);
                }
                if ($('input[name=maxlength][type=checkbox]', modal).prop('checked')) {
                    const maxlength = $('input[name=maxlength][type=number]', modal).val();
                    constraints.push(`maxlength(${maxlength})`);
                }
                if ($('input[name=length][type=checkbox]', modal).prop('checked')) {
                    const length = $('input[name=length][type=number]', modal).val();
                    constraints.push(`length(${length})`);
                }
                if ($('input[name=min][type=checkbox]', modal).prop('checked')) {
                    const min = $('input[name=min][type=number]', modal).val();
                    constraints.push(`min(${min})`);
                }
                if ($('input[name=max][type=checkbox]', modal).prop('checked')) {
                    const max = $('input[name=max][type=number]', modal).val();
                    constraints.push(`max(${max})`);
                }
                if ($('input[name=range][type=checkbox]', modal).prop('checked')) {
                    const min = $('input[name=range-min][type=number]', modal).val();
                    const max = $('input[name=range-max][type=number]', modal).val();
                    constraints.push(`range(${min},${max})`);
                }
                if ($('input[name=alpha]', modal).prop('checked')) {
                    constraints.push('alpha');
                }
                if ($('input[name=regex][type=checkbox]', modal).prop('checked')) {
                    const expression = $('input[name=expression]', modal).val();
                    constraints.push(`regex(${expression})`);
                }
                return constraints.join(':');
            }
        });
    });
</script>
<script>
    $(function () {
        $('.js-config-auth').click(function () {
            $.get({
                url: '@Url.Action(nameof(RequestsController.GetAuthorizationPartial), "Requests", new {ProjectName = ViewData["ProjectName"], id = ViewData["RequestId"]})',
                success: function (data) {
                    const html = data;
                    const modal = $(html);
                    $('#btnSave', modal).click(function () {
                        const selectedSchemes = $("#selected-schemes").sortable("toArray", {
                            attribute: 'data-scheme-id'
                        });
                        let requirements = [];
                        $('#requirements tbody tr', modal).each(function (index, elem) {
                            const name = $('input.js-name', elem).val();
                            const expression = $('input.js-express', elem).val();
                            const status = $('input.js-status', elem).prop('checked');
                            if (name !== '' && expression !== '') {
                                requirements.push({
                                    name: name,
                                    ConditionalExpression: expression,
                                    Active: status
                                });
                            }
                        });
                        let auth = {
                            Type: $('input[name=Type]', modal).val(),
                            AuthenticationSchemes: selectedSchemes,
                            Requirements: requirements
                        };
                        $.post({
                            url: '@Url.Action(nameof(RequestsController.ConfigAuthorization), "Requests", new {projectName = ViewData["ProjectName"], id = ViewData["RequestId"]})',
                            data: auth,
                            success: function (data) {
                                $('#btnSave', modal).off('click');
                                const id = 1;
                                modal.data('id', id);
                                modal.modal('hide');
                            },
                            error: function () {
                                alert('something went wrong');
                            }
                        });
                    });
                    $("#available-schemes, #selected-schemes", modal).sortable({
                        connectWith: ".connectedSortable"
                    }).disableSelection();

                    $('.js-select-authorization', modal).click(function () {
                        $('input[name=Type]').val($(this).data('authorization'));
                        $('#selectedAuthorization').html($(this).text());
                        update(modal);
                    });
                    modal.on('shown.bs.modal', function (e) {
                        update(modal);
                    });
                    modal.on('hidden.bs.modal', function (e) {
                        if (modal.data('id') !== undefined) {
                            location.reload();
                        }
                        modal.remove();
                    });
                    modal.modal('show');
                    function update(modal) {
                        const title = $('input[name=Type]').val();
                        if (title === 'None' || title === 'AllowAnonymous') {
                            $('.js-auth-schemes', modal).find('input, textarea, button, select').attr('disabled', true);
                            $('.js-requirements', modal).find('input, textarea, button, select').attr('disabled', true);
                        } else {
                            $('.js-auth-schemes', modal).find('input, textarea, button, select').attr('disabled', false);
                            $('.js-requirements', modal).find('input, textarea, button, select').attr('disabled', false);
                        }
                    }
                }
            });
        });
    });
</script>