@using MockServer.Web.Common
@model MockServer.Web.Models.ProjectSettings.Auth.JwtBearerAuthModel
@{
    var project = Model.Project;
    var formMode = FormMode.Edit;
}
<div class="row flex-nowrap">
    <partial name="/Views/ProjectSettings/Shared/_SideBar.cshtml" model="@project.Name" />
    <div class="col py-3">
        <div class="w-75">
            <h5>Create JWT Authentication</h5>
            <form method="post">
                <div class="card mb-2">
                    <div class="card-header">
                        Definition
                    </div>
                    <div class="card-body">
                        <div class="mb-3 row">
                            <label for="SchemeName" class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" asp-for="SchemeName">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-header">
                        Standard JWT Claims
                    </div>
                    <div class="card-body">
                        <div class="mb-3 row">
                            <label asp-for="Options.Issuer" class="col-sm-2 col-form-label">Issuer</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" asp-for="Options.Issuer">
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label asp-for="Options.Expire" class="col-sm-2 col-form-label">Expiration</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control" asp-for="Options.Expire">
                            </div>
                            <div class="col-sm-4">
                                <button type="button" class="btn btn-success btn-xs">in 60 minutes</button>
                                <button type="button" class="btn btn-success btn-xs">in 1 days</button>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label asp-for="Options.Audience" class="col-sm-2 col-form-label">Audience</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" asp-for="Options.Audience">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-header">
                        Additional Claims
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <ul style="list-style: initial;">
                                <li>To set a static value, use the format static[value]. For example, to set the claim
                                    the value to
                                    "example.com" use
                                    static[example.com]</li>
                                <li>To set a dynamic value bound from a request data like header or query, use the
                                    format [source][name].
                                    For example, to set the value of 'x-user-id' header in the request, use
                                    header[x-user-id]. header and query and
                                    body are supported sources.</li>
                            </ul>
                        </div>
                        <div>
                            <table class="table" id="additional-claims-table">
                                <thead>
                                    <tr>
                                        <th>Claim Type</th>
                                        <th>Value</th>
                                        <th>&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        Model.Options.AdditionalClaims.Add(new());
                                    }
                                    @for (int i = 0; i < Model.Options.AdditionalClaims.Count; i++)
                                    {
                                        <tr>
                                            <td class="align-middle" style="width:150px">
                                                <input type="text" class="form-control js-claim-input js-claim-type"
                                                asp-for="Options.AdditionalClaims[i].Type">
                                            </td>
                                            <td class="align-middle">
                                                <input type="text" class="form-control js-claim-input js-claim-name"
                                                asp-for="Options.AdditionalClaims[i].Value">
                                            </td>
                                            <td class="align-middle">
                                                <button class="btn js-claim-delete" type="button">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="card mb-2">
                    <div class="card-header">
                        Algorithm & Secret Key
                    </div>
                    <div class="card-body">
                        <div class="mb-3 row">
                            <label for="algorithm" class="col-sm-2 col-form-label">Algorithm</label>
                            <div class="col-sm-10">
                                <input type="hidden" asp-for="Options.Algorithm">
                                <div class="dropdown">
                                    <button class="btn btn-default dropdown-toggle" type="button"
                                        data-bs-toggle="dropdown">
                                        <span id="selectedAlgorithm">@(Model.Options?.Algorithm??"HS256")</span>
                                        <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu" role="menu">
                                        <li><button type="button" data-algorithm="HS256"
                                                class="dropdown-item js-select-algorithm" href="#">HS256</button></li>
                                        <li><button type="button" data-algorithm="HS384"
                                                class="dropdown-item js-select-algorithm" href="#">HS384</button></li>
                                        <li><button type="button" data-algorithm="HS512"
                                                class="dropdown-item js-select-algorithm" href="#">HS512</button></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3 row">
                            <label asp-for="Options.SecretKey" class="col-sm-2 col-form-label">Key</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control" asp-for="Options.SecretKey">
                            </div>
                            <div class="col-sm-2">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-success dropdown-toggle"
                                        data-bs-toggle="dropdown">Generate
                                    </button>
                                    <ul class="dropdown-menu" role="menu">
                                        <li><button data-bytes="32" type="button"
                                                class="dropdown-item js-generate-key">32-byte key</button></li>
                                        <li><button data-bytes="64" type="button"
                                                class="dropdown-item js-generate-key">64-byte key</button></li>
                                        <li><button data-bytes="128" type="button"
                                                class="dropdown-item js-generate-key">128-byte key</button></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <button type="button" class="btn btn-secondary me-2"
                        onclick="location.href='@Context.Request.Headers["Referer"].ToString()'">Back</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a></a>
                </div>
            </form>
        </div>
    </div>
</div>
<template id="additional-claim-row-template">
    <tr>
        <td class="align-middle" style="width:150px">
            <input type="text" class="form-control js-claim-input js-claim-type">
        </td>
        <td class="align-middle">
            <input type="text" class="form-control js-claim-input js-claim-name">
        </td>
        <td class="align-middle">
            <button class="btn js-claim-delete" type="button">
                <i class="bi bi-trash"></i>
            </button>
        </td>
    </tr>
</template>
<script>
    $(function () {
        $('.js-select-algorithm').click(function () {
            $('input[name="Options.Algorithm"]').val($(this).data('algorithm'));
            $('#selectedAlgorithm').html($(this).data('algorithm'));
        });
        $('.js-generate-key').click(function () {
            const bytes = $(this).data('bytes');
            const key = createKey(bytes);
            $('input[name="Options.SecretKey"]').val(key);
            function createKey(charCount) {
                var key = "";
                var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                for (var i = 0; i < charCount; i++) {
                    key += possible.charAt(Math.floor(Math.random() * possible.length));
                }

                return key;
            }
        });

        $('body').on('keyup', '.js-claim-input', function (e) {
            const index = $(this).closest('tr').index();
            if (index == $("#additional-claims-table tbody tr").length - 1) {
                const tr = $($('#additional-claim-row-template').html());
                $("#additional-claims-table tbody").append(tr);
            }
        });

        $('body').on('click', '.js-claim-delete', function (e) {
            const tr = $(this).closest('tr');
            tr.remove();
        });
    });
</script>