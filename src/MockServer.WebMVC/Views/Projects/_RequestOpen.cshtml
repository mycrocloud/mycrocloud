@using MockServer.WebMVC.Controllers
@model MockServer.WebMVC.Models.Project.RequestOpenViewModel

<style type="text/css" media="screen">
    #request-body-editor,
    #response-body-editor {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }
</style>
<div class="row h-100">
    <div class="col-9 h-100 overflow-scroll">
        <div class="mb-1">
            <strong class="fw-bolder">@Model.Name</strong>
        </div>
        <div class="mb-2">
            <small>@Model.Description</small>
        </div>
        <div class="mb-2">
            <strong class="me-2 @Model.MethodTextColor" id="method">@Model.Method</strong>
            <span id="path">@Model.Path</span>
        </div>
        <div class="input-group mb-3">
            <input id="privateKey" type="text" class="form-control" value="@Model.Url" readonly>
            <button id="btnCopyPrivateKeyToClipboard" type="button" class="input-group-text">
                <i class="bi bi-clipboard">
                </i></button>
        </div>
        <div>
            <div class="d-flex">
                <h5 class="me-auto">Fixed request</h5>
            </div>
            <div>
                <div class="d-flex">
                    <h6 class="me-auto">Request</h6>
                    <button id="btnSave" class="btn btn-primary btn-sm px-3">Save</button>
                </div>
                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button type="button" class="nav-link active py-1" data-bs-toggle="tab"
                            data-bs-target="#request-param-tab">Params</button>
                    </li>
                    <li class="nav-item">
                        <button type="button" class="nav-link py-1" data-bs-toggle="tab"
                            data-bs-target="#request-header-tab">Headers</button>
                    </li>
                    <li class="nav-item">
                        <button type="button" class="nav-link py-1" data-bs-toggle="tab"
                            data-bs-target="#request-body-tab">Body</button>
                    </li>
                </ul>
                <div class="tab-content" style="min-height: 200px;">
                    <div id="request-param-tab" class="tab-pane fade show active p-2" role="tabpanel">
                        <table id="request-params" class="table table-sm p-0 m-0">
                            <thead>
                                <tr>
                                    <th style="width: 35%" scope="col">Key</th>
                                    <th style="width: 35%" scope="col">Value</th>
                                    <th style="width: 10%" scope="col">Required</th>
                                    <th style="width: 10%" scope="col">Exactly</th>
                                    <th style="width: 10%" scope="col"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.RequestParams.Count; i++)
                                {
                                    <tr>
                                        <td class="align-middle"><input asp-for="RequestParams[i].Key" type="text"
                                            class="form-control form-control-sm param-key" placeholder="key">
                                        </td>
                                        <td class="align-middle"><input type="text"
                                            class="form-control form-control-sm param-value"
                                            asp-for="RequestParams[i].Value" placeholder="value">
                                        </td>
                                        <td class="align-middle"><input type="checkbox"
                                            class="form-check-input param-required" asp-for="RequestParams[i].Required"
                                            checked=@Model.RequestParams[i].Required>
                                        </td>
                                        <td class="align-middle"><input type="checkbox"
                                            class="form-check-input param-match-exactly"
                                            asp-for="RequestParams[i].MatchExactly"
                                            checked=@Model.RequestParams[i].MatchExactly>
                                        </td>
                                        <td class="align-middle"><button
                                            class="btn param-delete text-gray btn-show-on-hover"><i
                                                class="bi bi-trash"></i></button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div id="request-header-tab" class="tab-pane fade p-2" role="tabpanel">
                        <table id="request-header-table" class="table table-sm p-0 m-0">
                            <thead>
                                <tr>
                                    <th style="width: 35%" scope="col">Header</th>
                                    <th style="width: 35%" scope="col">Value</th>
                                    <th style="width: 10%" scope="col">Required</th>
                                    <th style="width: 10%" scope="col">Exactly</th>
                                    <th style="width: 10%" scope="col"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.RequestHeaders.Count; i++)
                                {
                                    <tr>
                                        <td class="align-middle"><input type="text" class="form-control form-control-sm"
                                            asp-for="RequestHeaders[i].Name" placeholder="name">
                                        </td>
                                        <td class="align-middle"><input type="text" class="form-control form-control-sm"
                                            asp-for="RequestHeaders[i].Value" placeholder="value">
                                        </td>
                                        <td class="align-middle"><input type="checkbox" class="form-check-input"
                                            asp-for="RequestHeaders[i].Required"
                                            checked=@Model.RequestHeaders[i].Required>
                                        </td>
                                        <td class="align-middle"><input type="checkbox" class="form-check-input"
                                            asp-for="RequestHeaders[i].MatchExactly"
                                            checked=@Model.RequestHeaders[i].MatchExactly>
                                        </td>
                                        <td class="align-middle"><button
                                            class="btn header-delete text-gray btn-show-on-hover"><i
                                                class="bi bi-trash"></i></button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div id="request-body-tab" class="tab-pane fade p-2" role="tabpanel">
                        <div class="px-2 mt-1">
                            <div class="d-flex input-group mb-2">
                                <div class="form-check me-5">
                                    <input class="form-check-input" type="checkbox" asp-for="RequestBody.Required" 
                                        checked="@Model.RequestBody?.Required">
                                    <label class="form-check-label" asp-for="RequestBody.Required"></label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" asp-for="RequestBody.MatchExactly"
                                        checked="@Model.RequestBody?.MatchExactly">
                                    <label class="form-check-label" for="flexCheckChecked">Exactly</label>
                                </div>
                            </div>
                            <div>
                                <div class="d-flex">
                                    <select id="request-body-type" class="form-select form-select-sm w-auto mb-1">
                                        <option value="json" selected>JSON</option>
                                        <option value="xml">XML</option>
                                        <option value="text">Text</option>
                                    </select>
                                    <div class="ms-auto">
                                        <button class="btn btn-sm btn-link text-decoration-none">Format</button>
                                    </div>
                                </div>
                                <div class="position-relative" style="min-height: 200px;">
                                    <textarea asp-for="RequestBody.Text"></textarea>
                                    <div id="request-body-editor"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <h6>Response</h6>
                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button type="button" class="nav-link active py-1" data-bs-toggle="tab"
                            data-bs-target="#response-header-tab">Headers</button>
                    </li>
                    <li class="nav-item">
                        <button type="button" class="nav-link py-1" data-bs-toggle="tab"
                            data-bs-target="#response-body-tab">Body</button>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="response-header-tab" class="tab-pane fade show active p-2" role="tabpanel">
                        <table id="response-header-table" class="table table-sm p-0 m-0">
                            <thead>
                                <tr>
                                    <th style="width: 45%" scope="col">Name</th>
                                    <th style="width: 45%" scope="col">Value</th>
                                    <th style="width: 10%" scope="col"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.ResponseHeaders?.Count; i++)
                                {
                                    <tr>
                                         <td class="align-middle"><input asp-for="ResponseHeaders[i].Name" type="text"
                                            class="form-control form-control-sm header-name" placeholder="name">
                                        </td>
                                        <td class="align-middle"><input type="text"
                                            class="form-control form-control-sm header-value"
                                            asp-for="ResponseHeaders[i].Value" placeholder="value">
                                        </td>
                                        <td class="align-middle"><button
                                            class="btn header-delete text-gray btn-show-on-hover"><i
                                                class="bi bi-trash"></i></button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div id="response-body-tab" class="tab-pane fade p-2" role="tabpanel">
                        <div class="d-flex">
                            <select id="response-body-type" class="form-select form-select-sm w-auto mb-1">
                                <option value="json" selected>JSON</option>
                                <option value="xml">XML</option>
                                <option value="text">Text</option>
                            </select>
                            <div class="ms-auto">
                                <button class="btn btn-sm btn-link text-decoration-none">Format</button>
                            </div>
                        </div>
                        <div class="position-relative" style="min-height: 200px;">
                            <textarea asp-for="ResponseBody.Text"></textarea>
                            <div id="response-body-editor"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-3 h-100 overflow-scroll">
        <p>Log</p>
    </div>
</div>
<template id="requestParamRow">
    <tr>
        <td class="align-middle"><input type="text" name="key" class="form-control form-control-sm param-key"
                placeholder="key">
        </td>
        <td class="align-middle"><input type="text" name="value" class="form-control form-control-sm param-value"
                placeholder="value">
        </td>
        <td class="align-middle"><input type="checkbox" name="required" class="form-check-input param-required">
        </td>
        <td class="align-middle"><input type="checkbox" name="matchExactly"
                class="form-check-input param-match-exactly">
        </td>
        <td class="align-middle"><button class="btn text-gray btn-show-on-hover param-delete"><i
                    class="bi bi-trash"></i></button>
        </td>
    </tr>
</template>
<template id="requestHeaderRow">
    <tr>
        <td class="align-middle"><input type="text" name="name" class="form-control form-control-sm header-name"
                placeholder="name">
        </td>
        <td class="align-middle"><input type="text" name="value" class="form-control form-control-sm header-value"
                placeholder="value">
        </td>
        <td class="align-middle"><input type="checkbox" name="required" class="form-check-input header-required">
        </td>
        <td class="align-middle"><input type="checkbox" name="matchExactly"
                class="form-check-input header-match-exactly">
        </td>
        <td class="align-middle"><button class="btn text-gray btn-show-on-hover header-delete"><i
                    class="bi bi-trash"></i></button>
        </td>
    </tr>
</template>
<template id="responseHeaderRow">
    <tr>
        <td class="align-middle">
            <input type="text" name="name" class="form-control form-control-sm header-name"
                placeholder="name">
        </td>
        <td class="align-middle">
            <input type="text" name="value" class="form-control form-control-sm header-value"
                placeholder="value">
        </td>
        <td class="align-middle">
            <button class="btn text-gray btn-show-on-hover header-delete"><i
                    class="bi bi-trash"></i></button>
        </td>
    </tr>
</template>
<script>
    var requestBodyEditor = ace.edit("request-body-editor");
    requestBodyEditor.setShowPrintMargin("false");
    var textarea = $('textarea[name="RequestBody.Text"]').hide();
    requestBodyEditor.getSession().setValue(textarea.val());
    requestBodyEditor.getSession().on('change', function () {
            textarea.val(requestBodyEditor.getSession().getValue());
        });
    var responsetBodyEditor = ace.edit("response-body-editor");
    responsetBodyEditor.setShowPrintMargin("false");
    var responsetBodyTextArea = $('textarea[name="ResponseBody.Text"]').hide();
    responsetBodyEditor.getSession().setValue(responsetBodyTextArea.val());
    responsetBodyEditor.getSession().on('change', function () {
            responsetBodyTextArea.val(responsetBodyEditor.getSession().getValue());
        });
</script>
<script>
    $(function () {
        $('#request-body-type').change(function (e) {
            var mode = $('option:selected', $(this)).val();
            setEditorMode(mode);
        }).change();
        $('#response-body-type').change(function (e) {
            var mode = $('option:selected', $(this)).val();
            setResponseBodyEditorMode(mode);
        }).change();
        //$('#request-body-type').change();
    });

    function setEditorMode(mode) {
        if (mode === 'json') {
            requestBodyEditor.session.setMode("ace/mode/json");
        } else if (mode === 'xml') {
            requestBodyEditor.session.setMode("ace/mode/xml");
        } else if (mode === 'text') {
            requestBodyEditor.session.setMode("ace/mode/text");
        }
    }

    function setResponseBodyEditorMode(mode) {
            if (mode === 'json') {
                responsetBodyEditor.session.setMode("ace/mode/json");
            } else if (mode === 'xml') {
                responsetBodyEditor.session.setMode("ace/mode/xml");
            } else if (mode === 'text') {
                responsetBodyEditor.session.setMode("ace/mode/text");
            }
        }

    $(function () {
        addTableEventListener();
    });

    function addTableEventListener() {
        $('#request-params input[type=text]').off('keyup');
        $('#request-params .param-delete').off('click');

        $('#request-params input[type=text]').keyup(function () {
            const rowIndex = $('#request-params tbody tr').index($(this).closest('tr'));
            if (rowIndex === $('#request-params tbody tr').length - 1) {
                appendRequestParamRow();
                addTableEventListener();
            }
        });
        $('#request-params .param-delete').click(function () {
            $(this).off('click');
            $(this).closest("tr").remove();
            indexRow();
        });
    }
    function indexRow() {
        $('#request-params tbody tr').each(function (rowIndex) {
            $("input.param-key", this).attr('name', 'RequestParams[' + rowIndex + '].Key');
            $("input.param-value", this).attr('name', 'RequestParams[' + rowIndex + '].Value');
            $("input.param-required", this).attr('name', 'RequestParams[' + rowIndex + '].Required');
            $("input.param-match-exactly", this).attr('name', 'RequestParams[' + rowIndex + '].MatchExactly');
        });
    }
    function appendRequestParamRow() {
        if ('content' in document.createElement('template')) {
            const template = document.querySelector('#requestParamRow');
            let templateContent = template.content.cloneNode(true);
            let tr = $(templateContent.querySelector('tr'));
            const rowIndex = $('#request-params tbody tr').length;
            $("input.param-key", tr).attr('name', 'RequestParams[' + rowIndex + '].Key');
            $("input.param-value", tr).attr('name', 'RequestParams[' + rowIndex + '].Value');
            $("input.param-required", tr).attr('name', 'RequestParams[' + rowIndex + '].Required');
            $("input.param-match-exactly", tr).attr('name', 'RequestParams[' + rowIndex + '].MatchExactly');
            $('#request-params tbody').append(tr);
        } else {
            alert('HTML template element is not supported');
        }
    }
</script>
<script>
    $(function () {
        addRequestHeaderTableEventListener();
    });
    function addRequestHeaderTableEventListener() {
        $('#request-header-table input[type=text]').off('keyup');
        $('#request-header-table .header-delete').off('click');

        $('#request-header-table input[type=text]').keyup(function () {
            const rowIndex = $('#request-header-table tbody tr').index($(this).closest('tr'));
            if (rowIndex === $('#request-header-table tbody tr').length - 1) {
                appendRequestHeaderRow();
                addRequestHeaderTableEventListener();
            }
        });
        $('#request-header-table .header-delete').click(function () {
            $(this).off('click');
            $(this).closest("tr").remove();
            $('#request-header-table tbody tr').each(function (rowIndex) {
                $("input.header-key", this).attr('name', 'RequestHeaders[' + rowIndex + '].Name');
                $("input.header-value", this).attr('name', 'RequestHeaders[' + rowIndex + '].Value');
                $("input.header-required", this).attr('name', 'RequestHeaders[' + rowIndex + '].Required');
                $("input.header-match-exactly", this).attr('name', 'RequestHeaders[' + rowIndex + '].MatchExactly');
            });
        });
    }
    function appendRequestHeaderRow() {
        if ('content' in document.createElement('template')) {
            const template = document.querySelector('#requestHeaderRow');
            let templateContent = template.content.cloneNode(true);
            let tr = $(templateContent.querySelector('tr'));
            const rowIndex = $('#request-header-table tbody tr').length;
            $("input.header-key", tr).attr('name', 'RequestHeaders[' + rowIndex + '].Name');
            $("input.header-value", tr).attr('name', 'RequestHeaders[' + rowIndex + '].Value');
            $("input.header-required", tr).attr('name', 'RequestHeaders[' + rowIndex + '].Required');
            $("input.header-match-exactly", tr).attr('name', 'RequestHeaders[' + rowIndex + '].MatchExactly');
            $('#request-header-table tbody').append(tr);
        } else {
            alert('HTML template element is not supported');
        }
    }
</script>
<script>
    $(function () {
        addResponseHeaderTableEventListener();
        $("#response-header-table input[type=text]").autocomplete({
            source: ["Option 1", "Option 2", "Option 3"]
        });
    });
    function addResponseHeaderTableEventListener() {
        $('#response-header-table input[type=text]').off('keyup');
        $('#response-header-table .header-delete').off('click');

        $('#response-header-table input[type=text]').keyup(function () {
            const rowIndex = $('#response-header-table tbody tr').index($(this).closest('tr'));
            if (rowIndex === $('#response-header-table tbody tr').length - 1) {
                appendResponseHeaderRow();
                addResponseHeaderTableEventListener();
            }
        });
        $('#response-header-table .header-delete').click(function () {
            $(this).off('click');
            $(this).closest("tr").remove();
            $('#response-header-table tbody tr').each(function (rowIndex) {
                $("input.header-key", this).attr('name', 'ResponseHeaders[' + rowIndex + '].Name');
                $("input.header-value", this).attr('name', 'ResponseHeaders[' + rowIndex + '].Value');
            });
        });
    }
    function appendResponseHeaderRow() {
        if ('content' in document.createElement('template')) {
            const template = document.querySelector('#responseHeaderRow');
            let templateContent = template.content.cloneNode(true);
            let tr = $(templateContent.querySelector('tr'));
            const rowIndex = $('#response-header-table tbody tr').length;
            $("input.header-name", tr).attr('name', 'ResponseHeaders[' + rowIndex + '].Name');
            $("input.header-value", tr).attr('name', 'ResponseHeaders[' + rowIndex + '].Value');
            $('#response-header-table tbody').append(tr);
        } else {
            alert('HTML template element is not supported');
        }
    }
</script>
<script>
    $(function () {
        $('#btnSave').click(function () {
            let params = [];
            let headers = [];
            
            let body = {
                required: $("#request-body-tab input[name$='Required']").prop('checked'),
                matchExactly: $("#request-body-tab input[name$='MatchExactly']").prop('checked'),
                format: 'json',
                text: $('textarea[name="RequestBody.Text"]').val()
            };
            $('#request-params tbody tr').each(function () {
                const key = $("input[name$='Key']", this).val();
                const value = $("input[name$='Value']", this).val();
                const required = $("input[name$='Required']", this).prop('checked');
                const matchExactly = $("input[name$='MatchExactly']", this).prop('checked');
                if (key !== '' && value !== '') {
                    params.push({
                        key: key,
                        value: value,
                        required: required,
                        matchExactly: matchExactly
                    });
                }
            });
            $('#request-header-table tbody tr').each(function () {
                const name = $("input[name$='Name']", this).val();
                const value = $("input[name$='Value']", this).val();
                const required = $("input[name$='Required']", this).prop('checked');
                const matchExactly = $("input[name$='MatchExactly']", this).prop('checked');
                if (name !== '' && value !== '') {
                    headers.push({
                        name: name,
                        value: value,
                        required: required,
                        matchExactly: matchExactly
                    });
                }
            });
            let responseHeaders = [];
            $('#response-header-table tbody tr').each(function () {
                const name = $("input[name$='Name']", this).val();
                const value = $("input[name$='Value']", this).val();
                if (name !== '' && value !== '') {
                    responseHeaders.push({
                        name: name,
                        value: value
                    });
                }
            });

            let responseBody = {
                text: $('textarea[name="ResponseBody.Text"]').val()
            };

            let fields = [];
            fields[0] = '@nameof(Model.RequestParams)';
            fields[1] = '@nameof(Model.RequestHeaders)';
            fields[2] = '@nameof(Model.RequestBody)';
            fields[3] = '@nameof(Model.ResponseHeaders)';
            fields[4] = '@nameof(Model.ResponseBody)';
            $.post({
                url: '@Url.Action(nameof(RequestsController.ConfigFixedRequest), "Requests",new { projectName = Model.ProjectName,id = Model.Id})',
                data: {
                    fields: fields,
                    RequestParams: params,
                    RequestHeaders: headers,
                    RequestBody: body,
                    ResponseHeaders: responseHeaders,
                    ResponseBody: responseBody
                },
                success: function (data) {
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        });
    });
</script>