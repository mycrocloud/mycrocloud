@using MockServer.Core.Models
@using MockServer.WebMVC.Controllers
@using MockServer.WebMVC.Extentions

@model MockServer.WebMVC.Models.Project.ProjectViewViewModel
<div class="row h-100 p-2">
    <div class="col-3 h-100 overflow-scroll">
        <div class="d-grid mt-1">
            <button id="btnNewRequest" type="button" class="btn btn-sm bg-violet-500 text-white">New</button>
        </div>
        <div class="request-container">
            <ul id="requests" class="list-group list-group-flush mt-2">
                @foreach (var req in Model.Requests)
                {
                    <li data-request-id="@req.Id" class="request-list-item list-group-item px-2 py-1">
                        <div class="row">
                            <div class="col request-info">
                                <span class="text-base fw-light text-slate-700">@req.Name</span>
                                <div>
                                    <small class="badge rounded-pill py-1 fw-normal text-white me-1 @req.MethodBadgeColor"
                                    style="width: 50px;">@req.Method</small>
                                    <small class="text-muted">/@req.Path</small>
                                </div>
                            </div>
                            <div class="p-0 my-auto" style="width: 40px;">
                                <button class="btn btn-sm btn-context-menu" type="button">...</button>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
    <div class="col-9 h-100" id="RequestOpen">
    </div>
</div>

<template id="context-menu">
    <div class="context-menu-container">
        <div class="btn-group-vertical" role="group">
            <button name="btnDelete" type="button" class="btn btn-default text-danger">Delete</button>
        </div>
    </div>
</template>

<!-- Modal -->
<template id="requestDeleteConfirmModalTemplate">
    <div class="modal fade" id="requestDeleteConfirmModal" tabindex="-1" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Delete confirm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are your sure want to delete request?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button name="btnDelete" type="button" class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>
</template>
<!-- New request: Start -->
<script>
    $(function () {
        $('#btnNewRequest').click(function () {
            loadPartial();
        });
    });
    function loadPartial() {
        $.get({
            url: '@Url.Action(nameof(RequestsController.GetCreatePartial), "Requests", new {projectName = ViewData["ProjectName"]})',
            success: function (data) {
                const html = data;
                const modal = $(html);
                modal.on('shown.bs.modal', function () {
                    $('#btnSave', modal).click(function () {
                        let request = {
                            Type: $('input[name=Type]:checked', modal).val(),
                            Name: $('input[name=Name]', modal).val(),
                            Description: $('input[name=Description]', modal).val(),
                            Method: $('select[name=Method] option:selected', modal).val(),
                            Path: $('input[name=Path]', modal).val()
                        };
                        $.post({
                            url: '@Url.Action(nameof(RequestsController.CreateAjax), "Requests", new {projectName = ViewData["ProjectName"]})',
                            data: request,
                            success: function (data) {
                                $('#btnSave', modal).off('click');
                                const id = data;
                                modal.data('id', id);
                                modal.modal('hide');
                            },
                            error: function () {
                                alert('something went wrong');
                            }
                        });
                    });
                    $('select[name=Method]').on('change', function () {
                        generatePreviewUrl(modal);
                    });
                    $('input[name=Path]').on('keyup', function () {
                        generatePreviewUrl(modal);
                    });
                });
                modal.on('hidden.bs.modal', function (e) {
                    if (modal.data('id') !== undefined) {
                        console.log('TODO: open request id ' + modal.data('id'));
                        location.reload();
                    }
                    modal.remove();
                });
                generatePreviewUrl(modal);
                modal.modal('show');
            }
        });
    }
    let baseUrl = '@string.Format("https://{0}.{1}.mockserver.com", ViewData["ProjectName"], User.Parse<ApplicationUser>().Username)';
    function generatePreviewUrl(modal) {
        const method = $('select[name=Method] option:selected', modal).text();
        const path = $('input[name=Path]', modal).val();
        $('#previewUrl', modal).val(method + '  ' + baseUrl + '/' + path);
    }
</script>
<!-- New request: End -->
<!-- Conext menu: Start -->
<script>
    $(function () {
        $('#requests .btn-context-menu').click(showRequestContextMenu);
    });

    function showRequestContextMenu() {
        $('.btn-clicked').removeClass('btn-clicked');
        $(document).off('click', documentClickHandler);
        $('.context-menu-container button[name=btnDelete]').off('click');
        $('.context-menu-container').remove();

        const requestId = $(this).closest('li').data('request-id');
        $(this).addClass('btn-clicked');
        var position = $(this).offset();
        const template = document.querySelector('#context-menu');
        const instance = template.content.cloneNode(true);
        var container = $('.context-menu-container', instance);
        var left = (position.left - 70 + $(this).outerWidth()) + 'px';
        var top = (position.top + $(this).outerHeight()) + 'px';
        container.css({ 'left': left, 'top': top });
        $('.btn-group-vertical button', container).click(function () {
            $('.btn-clicked').removeClass('btn-clicked');
            $(document).off('click', documentClickHandler);
            $('.context-menu-container button[name=btnDelete]').off('click');
            $('.context-menu-container').remove();
        });
        const deleteButton = $('button[name=btnDelete]', container);
        deleteButton.click(function () {
            //show confirm modal
            const modal = document.querySelector('#requestDeleteConfirmModalTemplate')
                .content.cloneNode(true);
            $('body').append(modal);

            $("#requestDeleteConfirmModal button[name=btnDelete]").click(function () {
                $(this).off('click');
                deleteRequest(requestId);
                $("#requestDeleteConfirmModal").modal("hide");
            });

            $("#requestDeleteConfirmModal").on('hide.bs.modal', function () {
                $("#requestDeleteConfirmModal button[name=btnDelete]").off('click');
                $("#requestDeleteConfirmModal").remove();
            })
            $("#requestDeleteConfirmModal").modal("show");
            $(this).off('click');
        });
        $('.request-container').append(container);
        $(document).click(documentClickHandler);
    }
    const documentClickHandler = function (e) {
        const menu = $('.context-menu-container');
        const button = $('.btn-clicked');
        // Check if the target of the click event is the context menu or one of its children
        if (e.target !== menu[0] && !menu.has(e.target).length && !$(e.target).is(button)) {
            button.removeClass('btn-clicked');
            // Remove the event handler
            $(document).off('click', documentClickHandler);
            //Remove the menu
            menu.remove();
        }
    }

    function deleteRequest(id) {
        $.post({
            async: false,
            url: '/Projects/@Model.ProjectInfo.Name' + '/requests/' + id + '/delete',
            success: function () {
                $('#requests [data-request-id=' + id + ']').remove();
            }
        });
    }
</script>
<!-- Conext menu: End -->
<!-- Open request: Start -->
<script>
    $(function () {
        $('#requests div.request-info').click(function () {
            const selected = $(this).closest('li');
            selected.parent().find('li').removeClass('bg-gray');
            selected.addClass('bg-gray');
            const id = selected.data('request-id');
            const tempUrl = '@Url.Action(nameof(RequestsController.Open), "Requests", new {projectName = ViewData["ProjectName"], id = -1})';
            $('#RequestOpen').load(tempUrl.replace('-1', id));
        });
    });
</script>
<!-- Open request: End -->