@model MycroCloud.WebMvc.Areas.Services.Models.WebApps.RouteIndexViewModel
@{
    var app = ViewBag._App as WebAppModel;
    var controller = "Routes";
    ViewData["Title"] = app.WebAppName + " - " + controller;
    var routes = Model.Routes.Select(r => new
    {
        Id = r.RouteId,
        r.Name,
        r.MatchPath,
        r.MatchMethods
    });
}
@section Scripts {
    <environment include="Development">
        <!-- Development Environment -->
        <link href="lib/vuetify/vuetify.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@mdi/font@latest/css/materialdesignicons.min.css" />
        <script src="lib/vue/vue.global.min.js"></script>
        <script src="lib/axios/axios.min.js"></script>
        <script src="lib/vuetify/vuetify.min.js"></script>
        <script src="lib/vee-validate/vee-validate.min.js"></script>
        <script src="lib/monaco-editor/min/vs/loader.min.js"></script>
    </environment>
    <environment exclude="Development">
        <!-- Not Development Environment -->
        <link href="https://cdn.jsdelivr.net/npm/vuetify@3.3.2/dist/vuetify.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@mdi/font@latest/css/materialdesignicons.min.css" />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.3.4/vue.global.prod.min.js"
            integrity="sha512-39BSQXI5q1XlvVhLfFRidKG8KM6Tr6VS/XSnNo6N/A0ZXexHCeoUI/s+ulujQy3UREjoLNrMnFat8VI0mMugWA=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.min.js"
            integrity="sha512-uMtXmF28A2Ab/JJO2t/vYhlaa/3ahUOgj1Zf27M5rOo8/+fcTUVH0/E0ll68njmjrLqOBjXM3V9NiPFL5ywWPQ=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script src="https://cdn.jsdelivr.net/npm/vuetify@3.3.2/dist/vuetify.min.js"></script>
        <script src="https://unpkg.com/vee-validate"></script>
    </environment>
}
<div class="row">
    <div class="col-2">
        <partial name="../Shared/_SideBar.cshtml" model="app.WebAppName" />
    </div>
    <div id="app" class="col-10">
        <v-row>
            <v-col cols="3">
                <v-btn class="bg-primary" prepend-icon="mdi-plus" block @@click="newRoute">
                    NEW ROUTE
                </v-btn>
                <v-text-field class="mt-2" v-model="searchTerm" @@keyup="fetchRoutes" variant="solo"
                    placeholder="Search">
                </v-text-field>
                <template v-if="routes.length > 0">
                    <v-list class="p-0">
                        <v-list-item class="pa-0 mt-1" v-for="route in routes" :key="route.id" v-on:click="openRoute(route.id)">
                            <div class="p-2" :class="{'bg-primary': route.id === selectedRoute?.id}">
                                <div>{{route.name}}</div>
                                <div>
                                    <v-badge v-for="m of route.matchMethods.slice(0,3)"
                                        :content="m"
                                        :color="getMethodBadgeColor(m)"
                                        text-color="white"
                                        inline>
                                    </v-badge>
                                </div>
                                <div>{{route.matchPath}}</div>
                            </div>
                        </v-list-item>
                    </v-list>
                </template>
                <template v-else>
                    <p>No routes. Create some.</p>
                </template>
            </v-col>
            <v-col cols="9">
                <div v-if="selectedRoute" class="overflow-y-auto" style="height: 80vh;">
                    <route-editor :route="selectedRoute" @@route-save="routeSave"></route-editor>
                </div>
            </v-col>
        </v-row>
    </div>
</div>
<partial name="_Partial/_RouteEditorComponent.cshtml" />
<script>
    const RootComponent = {
        setup() {
            const routes = ref([]);
            const selectedRoute = ref(null);
            let sampleRoute = null;
            const searchTerm = ref('');
            const newRoute = async () => {
                selectedRoute.value = { ...sampleRoute, id: undefined };
            }
            const openRoute = async id => {
                const TempRouteDetailUrl = '@Url.Action(nameof(WebAppRouteController.Get), WebAppRouteController.Name, new { WebAppName = app.WebAppName, RouteId = -9999})';
                const res = await axios.get(TempRouteDetailUrl.replace('-9999', id));
                selectedRoute.value = res.data;
                selectedRoute.value.id = selectedRoute.value.id || id;
            }
            const getMethodBadgeColor = (method) => {
                switch (method) {
                    case 'DELETE': return 'red';
                    case 'POST': return 'orange';
                    case 'PUT': return 'yellow';
                    case 'GET': return 'light-blue';
                    default: return 'light-blue';
                }
            }
            
            const fetchRoutes = () => {
                let timeout = null;
                const IndexUrl = '@Url.Action(nameof(WebAppRouteController.List), "WebAppRoute", new {WebApplicationName = app.WebAppName})'
                clearTimeout(timeout);
                timeout = setTimeout(async () => {
                    const params = {
                        SearchTerm: searchTerm.value
                    }
                    const query_params = new URLSearchParams(params);
                    let reqOptions = {
                        method: "GET",
                        url: IndexUrl.trimEnd('?') + '?' + query_params.toString()
                    }
                    let response = await axios.request(reqOptions);
                    routes.value = response.data
                }, 800);
            }
            const routeSave = (route) => {
                // Check if route already exists in routes array by its id
                const index = routes.value.findIndex(r => r.id === route.id);
                if (index === -1) {
                    // If route doesn't exist in routes array, add it to the beginning
                    routes.value.unshift(route);
                } else {
                    // If route already exists in routes array, replace it with updated route
                    routes.value.splice(index, 1, route);
                }
            }
            const cancel = () => {
                selectedRoute.value = null
            }
            const onRouteDeleted = (id) => {
                const index = routes.value.findIndex(r => r.id === id);
                if (index > -1) {
                    routes.value.splice(index, 1)
                }
            }
            onMounted(async () => {
                routes.value = JSON.parse('@Html.Raw(Json.Serialize(routes))');
                const response = await axios.get('@Url.Action(nameof(WebAppRouteController.Sample), WebAppRouteController.Name)')
                sampleRoute = response.data;
                console.log(JSON.stringify(sampleRoute));
            })
            return {
                newRoute,
                routes,
                selectedRoute,
                openRoute,
                routeSave,
                fetchRoutes,
                searchTerm,
                cancel,
                onRouteDeleted,
                getMethodBadgeColor
            }
        }
    }
</script>
<script>
    window.axios = axios;
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    const { createApp, onMounted, ref, nextTick, computed, watch } = Vue;
    const { createVuetify } = Vuetify;
    const theme = {
        dark: false,
        colors: {
            background: '#0000',
            surface: '#FFFFFF',
            primary: '#6200EE',
            'primary-darken-1': '#3700B3',
            secondary: '#03DAC6',
            'secondary-darken-1': '#018786',
            error: '#B00020',
            info: '#2196F3',
            success: '#4CAF50',
            warning: '#FB8C00',
        },
    };
    const vuetify = createVuetify({
        ssr: true,
        theme: {
            defaultTheme: 'default',
            themes: {
                default: {
                    dark: false,
                    colors: {
                        background: '#0000',
                        surface: '#FFFFFF',
                        primary: '#0d6efd',
                        'primary-darken-1': '#3700B3',
                        secondary: '#03DAC6',
                        'secondary-darken-1': '#018786',
                        error: '#B00020',
                        info: '#2196F3',
                        success: '#4CAF50',
                        warning: '#FB8C00',
                    },
                }
            }
        }
    });
    const app = createApp(RootComponent);
    app.component('route-editor', RouteEditorComponent);
    app.use(vuetify);
    app.mount('#app');
</script>