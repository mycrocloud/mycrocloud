@model RouteIndexViewModel
@{
    var app = ViewBag._App as WebAppModel;
    var appName = app.WebAppName;
    var matchHttpMethodItems = Model.HttpMethodSelectListItem.Select(m => new
    {
        Title = m.Text.ToUpper(),
        Value = m.Value.ToUpper()
    });
    var authorizationAuthenticationSchemeItems = Model.AuthorizationAuthenticationSchemeSelectListItem
    .Select(p => new
    {
        Value = int.Parse(p.Value),
        Title = p.Text
    });
    var authorizationPolicyItems = Model.AuthorizationPolicySelectListItem?
    .Select(p => new
    {
        Value = int.Parse(p.Value),
        Title = p.Text
    });
    var responseProviders = Html.GetEnumSelectList<RouteResponseProvider>()
    .Select(p => new
    {
        Value = ((RouteResponseProvider)int.Parse(p.Value)).ToString(),
        Title = p.Text.ToUpper()
    });
}
<partial name="_ValidationRulesConfigComponent.cshtml" />
<template id="routeEditorTemplate">
    <div class="p-2">
        <v-btn @@click="importJson" class="me-2">Import</v-btn>
        <v-btn @@click="exportJson" class="me-2" :disabled="!route.id">Export</v-btn>
        <v-btn @@click="duplicate" class="me-2" :disabled="!route.id">Duplicate</v-btn>
        <v-btn @@click="deleteRoute" :disabled="!route.id">Delete</v-btn>
    </div>
    <v-form v-on:submit.prevent="save">
        <v-card>
            <v-card-text>
                <section>
                    <h5>BASIC INFO</h5>
                    <v-text-field v-model="route.name" clearable label="Name" variant="solo"></v-text-field>
                    <v-textarea v-model="route.description" clearable label="Description" variant="solo"
                        rows="2"></v-textarea>
                </section>
                <section>
                    <h5>MATCH</h5>
                    <v-select v-model="route.matchMethods" :items="matchHttpMethodItems" item-title="title"
                        item-value="value" label="METHOD(S)" clearable chips multiple variant="solo">
                    </v-select>
                    <v-text-field v-model="route.matchPath" label="PATH" variant="solo" clearable></v-text-field>
                    <v-row v-if="false" no-gutters>
                        <v-col cols="3">
                            <v-text-field v-model="route.matchOrder" label="ORDER" type="number"
                                variant="solo"></v-text-field>
                        </v-col>
                    </v-row>
                </section>
                <section v-if="false">
                    <h5>AUTHORIZATION</h5>
                    <div>
                        <v-radio-group v-model="route.authorizationType" inline label="TYPE">
                            <v-radio label="ALLOW ANONYMOUS" :value="'@nameof(RouteAuthorizationType.AllowAnonymous)'">
                            </v-radio>
                            <v-radio label="AUTHORIZED" :value="'@nameof(RouteAuthorizationType.Authorized)'">
                            </v-radio>
                        </v-radio-group>
                        <v-expand-transition>
                            <div v-if="route.authorizationType == '@nameof(RouteAuthorizationType.Authorized)'">
                                <v-select v-model="route.authorization.authenticationSchemeWebAppIds"
                                    label="AUTHENTICATION SCHEMES" :items="authorizationAuthenticationSchemeItems"
                                    multiple variant="solo">
                                </v-select>
                                @* <v-select v-model="route.authorization.policyWebAppIds" clearable label="POLICIES"
                                :items="authorizationPolicyItems" multiple variant="solo">
                                </v-select> *@
                            </div>
                        </v-expand-transition>
                    </div>
                </section>
                <section v-if="false">
                    <h5>VALIDATION</h5>
                    <v-card>
                        <v-tabs v-model="requestValidationTab">
                            <v-tab value="queryParams">QUERY PARAMETERS</v-tab>
                            <v-tab value="headers">HEADERS</v-tab>
                            <v-tab value="body">BODY</v-tab>
                        </v-tabs>
                        <v-card-text>
                            <v-window v-model="requestValidationTab">
                                <v-window-item class="p-2" value="queryParams">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th style="width: 20%" scope="col">PARAMETER</th>
                                                <th style="width: 75%" scope="col">RULES</th>
                                                <th style="width: 5%" scope="col">ACTIONS</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr v-for="(param, index) in route.validation?.queryParameters">
                                                <td>
                                                    <v-text-field v-model="param.name" placeholder="name"
                                                        variant="solo">
                                                    </v-text-field>
                                                </td>
                                                <td>
                                                    <div class="d-flex flex-row pa-2 mb-6">
                                                        <template v-if="param.rules.length === 0">
                                                            <span class="pa-2 ma-2">No rules configured yet.</span>
                                                        </template>
                                                        <template v-else>
                                                            <v-chip-group>
                                                                <v-chip
                                                                    v-for="(rule, index) of param.rules.slice(0, 3)">
                                                                    {{rule.name}}
                                                                </v-chip>
                                                                <v-chip v-if="param.rules.length > 3">
                                                                    (+{{param.rules.length - 3 }} others)
                                                                </v-chip>
                                                            </v-chip-group>
                                                        </template>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="d-flex flex-row mb-6">
                                                        <v-btn icon="mdi-cog" class="ma-2 pa-2"
                                                            v-on:click="showValidationRulesConfigDialog('queryParams', index, param.rules)">
                                                        </v-btn>
                                                        <v-btn icon="mdi-delete" class="ma-2 pa-2"
                                                            v-on:click="route.validation.queryParameters.splice(index)">
                                                        </v-btn>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <div>
                                        <v-btn prepend-icon="mdi-plus" class="bg-secondary"
                                            v-on:click="addValidationRow('queryParams')">ADD</v-btn>
                                    </div>
                                </v-window-item>
                                <v-window-item class="p-2" value="headers">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th style="width: 20%" scope="col">HEADER</th>
                                                <th style="width: 75%" scope="col">RULES</th>
                                                <th style="width: 5%" scope="col">ACTIONS</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr v-for="(header, index) in route.validation?.headers">
                                                <td>
                                                    <v-text-field v-model="header.name" placeholder="name"
                                                        variant="solo">
                                                    </v-text-field>
                                                </td>
                                                <td>
                                                    <div class="d-flex flex-row pa-2 mb-6">
                                                        <template v-if="header.rules.length === 0">
                                                            <span class="pa-2 ma-2">
                                                                No rules configured yet.
                                                            </span>
                                                        </template>
                                                        <template v-else>
                                                            <v-chip-group>
                                                                <v-chip
                                                                    v-for="(rule, index) of header.rules.slice(0, 3)">
                                                                    {{rule.name}}
                                                                </v-chip>
                                                                <v-chip v-if="header.rules.length > 3">
                                                                    (+{{header.rules.length - 3 }} others)
                                                                </v-chip>
                                                            </v-chip-group>
                                                        </template>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="d-flex flex-row mb-6">
                                                        <v-btn icon="mdi-cog" class="ma-2 pa-2"
                                                            v-on:click="showValidationRulesConfigDialog('headers', index, header.rules)">
                                                        </v-btn>
                                                        <v-btn icon="mdi-delete" class="ma-2 pa-2"
                                                            v-on:click="route.validation.headers.splice(index)">
                                                        </v-btn>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <div>
                                        <v-btn prepend-icon="mdi-plus" color="secondary"
                                            v-on:click="addValidationRow('headers')">ADD</v-btn>
                                    </div>
                                </v-window-item>
                                <v-window-item class="p-2" value="body">
                                    <table>
                                        <thead>
                                            <tr>
                                                <th style="width: 20%" scope="col">FIELD</th>
                                                <th style="width: 75%" scope="col">RULES</th>
                                                <th style="width: 5%" scope="col">ACTIONS</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr v-for="(field, index) in route.validation?.body">
                                                <td>
                                                    <v-text-field v-model="field.field" placeholder="field"
                                                        variant="solo">
                                                    </v-text-field>
                                                </td>
                                                <td>
                                                    <div class="d-flex flex-row pa-2 mb-6">
                                                        <template v-if="field.rules.length === 0">
                                                            <span class="pa-2 ma-2">
                                                                No rules configured yet.
                                                            </span>
                                                        </template>
                                                        <template v-else>
                                                            <v-chip-group>
                                                                <v-chip
                                                                    v-for="(rule, index) of field.rules.slice(0, 3)">
                                                                    {{rule.name}}
                                                                </v-chip>
                                                                <v-chip v-if="field.rules.length > 3">
                                                                    (+{{field.rules.length - 3 }} others)
                                                                </v-chip>
                                                            </v-chip-group>
                                                        </template>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="d-flex flex-row mb-6">
                                                        <v-btn icon="mdi-cog" class="ma-2 pa-2"
                                                            v-on:click="showValidationRulesConfigDialog('body', index, field.rules)">
                                                        </v-btn>
                                                        <v-btn icon="mdi-delete" class="ma-2 pa-2"
                                                            v-on:click="route.validation.body.splice(index, 1)">
                                                        </v-btn>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <div>
                                        <v-btn prepend-icon="mdi-plus" color="secondary"
                                            v-on:click="addValidationRow('body')">ADD</v-btn>
                                    </div>
                                </v-window-item>
                            </v-window>
                        </v-card-text>
                    </v-card>
                    <validation-rules-config-dialog v-if="validationRules" :rules="validationRules"
                        @@save="saveValidationRules" @@close="closeValidationRulesConfigDialog">
                    </validation-rules-config-dialog>
                </section>
                <section>
                    <h5>RESPONSE</h5>
                    <v-select class="col-3" v-model="route.responseProvider" label="PROVIDER" :items="responseProviders"
                        variant="solo">
                    </v-select>
                    <div v-show="route.responseProvider=='@nameof(RouteResponseProvider.Mock)'">
                        <div v-if="true">
                            <div class="text-subtitle-2">STATUS CODE</div>
                            <v-row>
                                <v-col cols="3">
                                    <v-select v-model="route.response.statusCode.valueType" label="TYPE"
                                        :items="[{value: 'Static', title: 'STATIC'}, {value: 'Evaluated', title: 'EXPRESSION EVALUATED'}]"
                                        variant="solo">
                                    </v-select>
                                </v-col>
                                <v-col>
                                    <v-text-field v-if="route.response.statusCode.valueType=='Static'" v-model="route.response.statusCode.code"
                                        type="number" label="VALUE"variant="solo">
                                    </v-text-field>
                                    <v-text-field v-if="route.response.statusCode.valueType=='Evaluated'" v-model="route.response.statusCode.expression"
                                        type="text" label="EXPRESSION" variant="solo">
                                    </v-text-field>
                                </v-col>
                            </v-row>
                        </div>
                        <div v-if="false">
                            <div class="text-subtitle-2">HEADERS</div>
                            <v-row v-for="(header, index) of mockResponseHeaders" class="py-0">
                                <v-col cols="3">
                                    <v-text-field label="NAME" v-model="header.name" variant="solo"></v-text-field>
                                </v-col>
                                <v-col cols="3">
                                    <v-select v-model="header.valueType" label="VALUE TYPE"
                                        :items="[{value: 'Static', title: 'STATIC'}, {value: 'ExpressionEvaluated', title: 'EVALUATED'}]"
                                        variant="solo">
                                    </v-select>
                                </v-col>
                                <v-col>
                                    <v-text-field v-if="header.valueType === 'Static'" v-model="header.staticValue"
                                        label="VALUE" variant="solo">
                                    </v-text-field>
                                    <v-text-field v-if="header.valueType === 'ExpressionEvaluated'" v-model="header.evalExpression"
                                        label="EXPRESSION" variant="solo">
                                    </v-text-field>
                                </v-col>
                                <v-col cols="1">
                                    <v-btn icon="mdi-delete" color="danger"
                                        v-on:click="mockResponseHeaders.splice(index)"></v-btn>
                                </v-col>
                            </v-row>
                            <v-btn prepend-icon="mdi-plus" color="secondary"
                                v-on:click="mockResponseHeaders.push({valueType: 'Static'})">ADD</v-btn>
                        </div>
                        <div v-if="false">
                            <div class="text-subtitle-2">BODY</div>
                            <v-select class="col-3" v-model="route.response.body.renderedValue.engine" label="TYPE"
                                :items="[{value: 'None', title: 'STATIC'}, {value: 'JavaScript', title: 'EVALUATED'},
                                            {value: 'Handlebars', title: 'Handlebars'}]" variant="solo">
                            </v-select>
                            <v-select class="col-3" v-model="route.response.body.renderedValue.format"
                                :items="mockResponseBodyEditorLanguages" label="FORMAT" variant="solo">
                            </v-select>
                            <div>
                                <div>{{route.response.body.renderedValue.engine === 'None'? 'VALUE':
                                    route.response.body.renderedValue.engine === 'JavaScript'? 'EXPRESSION':
                                    'TEMPLATE'}}</div>
                                <div id="mockResponseBodyEditor" class="w-100 rounded-0"
                                    style="height: 100px; border: 1px solid grey;">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div v-show="route.responseProvider=='@nameof(RouteResponseProvider.ProxiedServer)'">
                        <v-container>Proxied Server</v-container>
                    </div>
                    <div v-show="route.responseProvider=='@nameof(RouteResponseProvider.Function)'">
                        <v-container>Function</v-container>
                    </div>
                </section>
            </v-card-text>
            <v-card-actions>
                <v-btn @@click="cancel">CANCEL</v-btn>
                <v-btn type="submit" variant="elevated" color="primary">SAVE</v-btn>
            </v-card-actions>
        </v-card>
    </v-form>
</template>
<script>
    const RouteEditorComponent = {
        template: '#routeEditorTemplate',
        components: {
            'validation-rules-config-dialog': ValidationRulesConfigComponent
        },
        props: {
            route: {
                type: Object,
                required: true
            }
        },
        emits: ['route-save'],
        setup(props, { emit }) {
            const { route } = props;
            console.log('setting...');
            console.log(JSON.stringify(route))
            
            // Match:START
            const matchHttpMethodItems = JSON.parse('@Json.Serialize(matchHttpMethodItems)');
            // Match:END

            // Authorization:START
            watch(() => route.authorizationType, (type) => {
                if (type === '@nameof(RouteAuthorizationType.Authorized)') {
                    route.authorization ??= {};
                }
            });
            const authorizationAuthenticationSchemeItems = JSON.parse('@Json.Serialize(authorizationAuthenticationSchemeItems)');
            const authorizationPolicyItems = JSON.parse('@Json.Serialize(authorizationPolicyItems)');
            // Authorization:END

            // Validation: START
            const requestValidationTab = ref();
            const addValidationRow = (prop) => {
                let emptyRule = { name: null, rules: [] };
                if (prop === 'queryParams') {
                    route.validation.queryParameters ??= [];
                    route.validation.queryParameters.push(emptyRule);
                } else if (prop === 'headers') {
                    route.validation.headers ??= [];
                    route.validation.headers.push(emptyRule);
                } else if (prop === 'body') {
                    route.validation.body ??= [];
                    route.validation.body.push(emptyRule);
                }
            }
            const validationRules = ref(null)
            let validationRulesFor = null;
            let validationRulesForIndex = null;
            const showValidationRulesConfigDialog = (prop, index, rules) => {
                validationRulesFor = prop;
                validationRulesForIndex = index;
                validationRules.value = [...rules];
            }
            const closeValidationRulesConfigDialog = () => {
                validationRules.value = null
                validationRulesFor = null
                validationRulesForIndex = null
            }
            const saveValidationRules = (rules) => {
                if (validationRulesFor === 'queryParams') {
                    route.validation.queryParameters[validationRulesForIndex].rules = rules;
                } else if (validationRulesFor === 'headers') {
                    route.validation.headers[validationRulesForIndex].rules = rules;
                } else if (validationRulesFor === 'body') {
                    route.validation.body[validationRulesForIndex].rules = rules;
                }
                validationRules.value = null
                validationRulesFor = null
                validationRulesForIndex = null
            }
            // Validation: END

            // Response
            const responseProviders = JSON.parse('@Json.Serialize(responseProviders)');
            const valueProviderItems = [{ value: 'Static', title: 'Static' }];
            //
            //Mock Response: START
            let mockResponseBodyEditor;
            watch(() => route.responseProvider, (provider) => {
                if (provider === '@nameof(RouteResponseProvider.Mock)' && mockResponseBodyEditor === undefined) {
                    initializeMockResponseBodyEditor();
                }
            });
            const mockResponseHeaders = ref(Object.keys(route.response.headers).map(key => {
                const item = route.response.headers[key];
                return { name: key, valueType: item.valueType, staticValue: item.staticValue, evalExpression: item.evalExpression }
            }));

            //add watcher for route.response.body.textFormat
            const mockResponseBodyEditorLanguages = ref([]);
            function initializeMockResponseBodyEditor() {
                require.config({ paths: { vs: "lib/monaco-editor/min/vs" } });
                require(["vs/editor/editor.main"], function () {
                    const languages = monaco.languages.getLanguages();
                    mockResponseBodyEditorLanguages.value = languages.filter(lang => lang.aliases != null).map(lang => ({
                        value: lang.id,
                        title: lang.aliases[0]
                    }));
                    var div = document.getElementById("mockResponseBodyEditor");
                    if (div) {
                        mockResponseBodyEditor = monaco.editor.create(document.getElementById("mockResponseBodyEditor"), {
                            value: route.response?.mock?.body?.renderedValue?.template,
                            language: route.response?.mock?.body?.renderedValue?.format,
                            automaticLayout: true,
                        });
                    }
                });
            }
            //Mock Response: END
            //
            const save = async () => {
                map(route);
                if (!await validate()) {
                    return;
                }
                let url;
                const isCreate = route.id === undefined || route.id === null;
                if (isCreate) {
                    url = '@Url.Action(nameof(WebAppRouteController.Create), WebAppRouteController.Name, new { WebAppName = appName})'
                } else {
                    let tempUrl = '@Url.Action(nameof(WebAppRouteController.Edit), WebAppRouteController.Name, new { WebAppName = appName, RouteId = -9999})'
                    url = tempUrl.replace('-9999', route.id);
                }
                console.log('submitting...')
                console.log(JSON.stringify(route));
                const res = await axios.post(url, route)
                if (isCreate) {
                    //route.id = res.data.rou
                }
                route.id = 1;
                emit('route-save', route);
            }
            function map(route) {
                route.response.$provider = route.responseProvider;
                if (route.responseProvider === '@nameof(RouteResponseProvider.Mock)') {
                    route.response.headers = Object.fromEntries(
                        mockResponseHeaders.value.map(header =>
                            {
                                const { name, valueType, staticValue, evalExpression } = header;
                                const data = { valueType };
                                if (valueType === "Static") {
                                    data.staticValue = staticValue;
                                } else if (valueType === "ExpressionEvaluated") {
                                    data.evalExpression = evalExpression;
                                }
                                return [name, data];
                            }
                        )
                    );
                }
            }
            async function validate() {
                return true;
            }
            const importJson = () => {
                // Open json file select dialog
                const input = document.createElement('input');
                input.type = 'file';
                input.onchange = (event) => {
                    // Read selected json file
                    const fileReader = new FileReader();
                    fileReader.readAsText(event.target.files[0], "UTF-8");
                    fileReader.onload = (e) => {
                        const { id } = route;
                        Object.assign(route, JSON.parse(e.target.result));
                        route.id = id; // Set id back to original value
                    }
                }
                input.click();
            }
            const exportJson = () => {
            }
            const duplicate = () => {
            }
            const deleteRoute = () => {

            }
            //
            onMounted(() => {
                // Initialize the Monaco editor
                if (route.responseProvider === '@nameof(RouteResponseProvider.Mock)') {
                    initializeMockResponseBodyEditor();
                }
            });
            return {
                matchHttpMethodItems,
                authorizationAuthenticationSchemeItems,
                authorizationPolicyItems,
                requestValidationTab,
                addValidationRow,
                validationRules,
                showValidationRulesConfigDialog,
                closeValidationRulesConfigDialog,
                saveValidationRules,
                responseProviders,
                mockResponseHeaders,
                mockResponseBodyEditorLanguages,
                save,
                importJson,
                exportJson,
                duplicate,
                deleteRoute
            }
        }
    }
</script>