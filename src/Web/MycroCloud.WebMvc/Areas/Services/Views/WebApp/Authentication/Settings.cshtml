@model MicroCloud.Web.Models.WebApplications.Authentications.AuthenticationSettingsModel
@{
    ViewData["Title"] = Model.WebAppModel.Name;
    var availableSchemes = Model.AuthenticationSchemeSelectListItem.Where(i => !i.Selected);
    var selectedSchemes = Model.AuthenticationSchemeSelectListItem.Where(i => i.Selected);
}
@section Scripts {
    <link rel="stylesheet" href="~/lib/jquery/dist/jquery-ui.css" />
    <script src="~/lib/jquery/dist/jquery-ui.min.js"></script>
}
<style>
    .dragSortableItems .sortable-list {
        list-style: none;
        margin: 0;
        min-height: 20px;
        padding: 0px;
    }

    .dragSortableItems .sortable-item {
        background-color: #fff;
        border: 1px solid #ddd;
        display: block;
        margin-bottom: -1px;
        padding: 10px;
        cursor: move;
        position: relative;
        padding-left: 8px;
    }

    .dragSortableItems .sortable-item .icon-drag {
        color: #ccc;
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
    }

    @*.dragSortableItems.sortable-item.sortable-item-input{visibility:hidden;pointer-events:none;position:absolute;}*@.dragSortableItems .placeholder {
        border: 1px dashed #666;
        height: 45px;
        margin-bottom: 5px;
    }

    .dragSortableItems .fixed-panel {
        max-height: 500px;
        overflow-y: auto;
        padding-bottom: 1px;
    }

    .custom-scrollbar::-webkit-scrollbar {
        width: 7px;
    }

    .custom-scrollbar::-webkit-scrollbar-track {
        background: transparent;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #888;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        border-radius: 5px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
</style>

<div class="row">
    <div class="col-2">
        <partial name="/Views/WebApplications/_SideBar.cshtml" model="Model.WebApplication" />
    </div>
    <div class="col-10">
        <partial name="/Views/WebApplications/Authentications/_NavBar.cshtml" model="Model.WebApplication" />
        <div class="mt-2">
            <form method="post">
                <div class="alert alert-info small">
                    <i class="bi bi-info-circle"></i>
                    &nbsp;&nbsp;Drag &amp; Drop schemes from the left over to the right side in the
                    desired location on your dashboard.
                </div>
                <span name="el_validationErrorFields" class="text-danger"></span>
                <div class="row dragSortableItems dragSortableItem_0 dragableMultiselect mb-2">
                    <div class="col-sm-6">
                        <div class="card">
                            <div class="card-header d-flex">
                                <div>
                                    Available Schemes
                                </div>
                            </div>
                            <div class="card-body">
                                <ul class="in_available_fields custom-scrollbar sortable-list fixed-panel ui-sortable">
                                    @{
                                        int index = 0;
                                        foreach (var item in availableSchemes)
                                        {
                                            <li class="sortable-item allowPrimary sortable-item-@index ui-sortable-handle"
                                            data-fid="@item.Value">
                                                <div>@item.Text</div>
                                                <input class="js-scheme-id" type="hidden" value="@item.Value">
                                            </li>
                                            index++;
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="card primaryPanel">
                            <div class="card-header">
                                Selected Schemes
                            </div>
                            <div class="card-body">
                                <div class="alert alert-warning small text-center mb-0" style="display: none;">
                                    No Schemes Selected
                                </div>
                                <ul class="in_primary_fields sortable-list selectedDropzone fixed-panel ui-sortable">
                                    @{
                                        int i = 0;
                                        foreach (var item in selectedSchemes)
                                        {
                                            <li class="sortable-item allowPrimary sortable-item-@i ui-sortable-handle px-2"
                                            data-fid="@item.Value">
                                                <div>@item.Text</div>
                                                <input class="js-scheme-id" type="hidden" value="@item.Value">
                                            </li>
                                            i++;
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <button class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    $(function () {
        // On ready
        $(document).ready(function () {
            const dragableMultiselect = $('.dragableMultiselect');
            dragableMultiselect.length && dragableMultiselect.each((index, value) => {
                const $this = $(value);

                $dragSortableItem = $('.dragSortableItem_' + index);
                let $mainWrapper = $dragSortableItem.closest('.dragSortableItems'),
                    $in_available_fields = $mainWrapper.find('.in_available_fields'),
                    $selectedDropzone = $mainWrapper.find('.selectedDropzone');

                checkFields($mainWrapper);
                $selectedDropzone.find('.sortable-item').each((index, value) => {
                    $(value).find('input.js-scheme-id').attr('name', `@(Html.NameFor(m => m.SelectedAuthenticationSchemeIds))[${index}]`)
                });
                // Set up our dropzone
                $in_available_fields.sortable({
                    connectWith: '.sortable-list',
                    placeholder: 'placeholder',
                    start: function (event, ui) {
                        if (!$(ui.item).hasClass("allowPrimary")) {
                            $mainWrapper.find(".primaryPanel").removeClass('panel-primary').addClass("panel-danger");
                        }
                        checkFields($mainWrapper)
                    },
                    receive: function (event, ui) {
                        //$(ui.item).find('.sortable-item-input').prop('checked', false);
                    },
                    stop: function (event, ui) {
                        if (!$(ui.item).hasClass("allowPrimary")) {
                            $mainWrapper.find(".primaryPanel").removeClass("panel-danger").addClass('panel-primary');
                        }
                    },
                    change: function (event, ui) {
                        checkFields($mainWrapper);
                    },
                    update: function (event, ui) {
                        refresh();
                        checkFields($mainWrapper);
                    },
                    out: function (event, ui) {
                        checkFields($mainWrapper);
                    }
                }).disableSelection();

                // Enable dropzone for primary fields
                $selectedDropzone.sortable({
                    connectWith: '.sortable-list',
                    placeholder: 'placeholder',
                    receive: function (event, ui) {
                        //console.log('selectedDropzone: receive');
                        // If we dont allow primary fields here, cancel
                        if (!$(ui.item).hasClass("allowPrimary")) {
                            $(ui.placeholder).css('display', 'none');
                            $(ui.sender).sortable("cancel");
                        } else {
                            //$(ui.item).find('.sortable-item-input').prop('checked', true);
                        }
                    },
                    over: function (event, ui) {
                        //console.log('selectedDropzone: over');
                        if (!$(ui.item).hasClass("allowPrimary")) {
                            $(ui.placeholder).css('display', 'none');
                        } else {
                            $(ui.placeholder).css('display', '');
                        }
                    },
                    start: function (event, ui) {
                        //console.log('selectedDropzone: start');
                        checkFields($mainWrapper)
                    },
                    change: function (event, ui) {
                        //console.log('selectedDropzone: change');
                        checkFields($mainWrapper);
                    },
                    update: function (event, ui) {
                        refresh();
                        checkFields($mainWrapper);
                    },
                    out: function (event, ui) {
                        //console.log('selectedDropzone: out');
                        checkFields($mainWrapper);
                    }
                }).disableSelection();

                function refresh() {
                    $selectedDropzone.find('.sortable-item').each((index, value) => {
                        $(value).find('input.js-scheme-id').attr('name', `@(Html.NameFor(m => m.SelectedAuthenticationSchemeIds))[${index}]`);
                        console.log('selected');
                    });
                    $in_available_fields.find('.sortable-item').each((index, value) => {
                        $(value).find('input.js-scheme-id').removeAttr('name');
                        console.log('deselected');
                    });
                }
            });
        });
        // Checks to see if the fields section has fields selected. If not, shows a placeholder
        function checkFields($this) {
            if ($this.find('.selectedDropzone').find('li').length >= 1) {
                $this.find('.primaryPanel').find('.alert').hide();
            } else {
                $this.find('.primaryPanel').find('.alert').show();
            }
        }
    });
</script>